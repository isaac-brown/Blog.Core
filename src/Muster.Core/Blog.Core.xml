<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Muster.Core</name>
    </assembly>
    <members>
        <member name="T:Blog.Core.Entity.BlogPost">
            <summary>
            Represents a single blog post.
            </summary>
        </member>
        <member name="M:Blog.Core.Entity.BlogPost.#ctor(System.String,NodaTime.IClock)">
            <summary>
            Initializes a new instance of the <see cref="T:Blog.Core.Entity.BlogPost"/> class.
            </summary>
            <param name="content">The content of the post.</param>
            <param name="clock">The clock that will be used.</param>
        </member>
        <member name="P:Blog.Core.Entity.BlogPost.Id">
            <summary>
            Gets the unique identifier for this <see cref="T:Blog.Core.Entity.BlogPost"/>.
            </summary>
        </member>
        <member name="P:Blog.Core.Entity.BlogPost.Content">
            <summary>
            Gets the text content of the <see cref="T:Blog.Core.Entity.BlogPost"/>.
            </summary>
        </member>
        <member name="P:Blog.Core.Entity.BlogPost.Created">
            <summary>
            Gets the instant that the <see cref="T:Blog.Core.Entity.BlogPost"/> was created.
            </summary>
        </member>
        <member name="P:Blog.Core.Entity.BlogPost.Status">
            <summary>
            Gets the <see cref="T:Blog.Core.BlogPostStatus"/> for the <see cref="T:Blog.Core.Entity.BlogPost"/>.
            </summary>
        </member>
        <member name="P:Blog.Core.Entity.BlogPost.Tags">
            <summary>
            Gets the list of <see cref="T:Blog.Core.Entity.Tag"/>s associated with the <see cref="T:Blog.Core.Entity.BlogPost"/>.
            </summary>
        </member>
        <member name="M:Blog.Core.Entity.BlogPost.Create(System.String,NodaTime.IClock)">
            <summary>
            Initializes a new instance of the <see cref="T:Blog.Core.Entity.BlogPost"/> class.
            </summary>
            <param name="content">The content of the post.</param>
            <param name="clock">The clock that will be used.</param>
            <returns>A new instance of the <see cref="T:Blog.Core.Entity.BlogPost"/> class.</returns>
        </member>
        <member name="M:Blog.Core.Entity.BlogPost.Publish">
            <summary>
            Publishes the <see cref="T:Blog.Core.Entity.BlogPost"/>, marking it as being visible to viewers.
            </summary>
        </member>
        <member name="T:Blog.Core.Entity.Tag">
            <summary>
            A tag to help describe and categorize a <see cref="T:Blog.Core.Entity.BlogPost"/>.
            </summary>
        </member>
        <member name="M:Blog.Core.Entity.Tag.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Blog.Core.Entity.Tag"/> class
            using the given name.
            </summary>
            <param name="name">The name for the tag.</param>
        </member>
        <member name="P:Blog.Core.Entity.Tag.Name">
            <summary>
            Gets the name of the <see cref="T:Blog.Core.Entity.Tag"/>.
            </summary>
        </member>
        <member name="P:Blog.Core.Entity.Tag.Id">
            <summary>
            Gets the Id of the <see cref="T:Blog.Core.Entity.Tag"/>.
            </summary>
        </member>
        <member name="M:Blog.Core.Entity.Tag.Create(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Blog.Core.Entity.Tag"/> class
            using the given name.
            </summary>
            <param name="name">The name for the tag.</param>
            <returns>A new <see cref="T:Blog.Core.Entity.Tag"/> instance.ra</returns>
        </member>
        <member name="T:Blog.Core.BlogPostStatus">
            <summary>
            Represents the possible status' of a <see cref="T:Blog.Core.Entity.BlogPost"/>.
            </summary>
        </member>
        <member name="P:Blog.Core.BlogPostStatus.Draft">
            <summary>
            Gets a status that indicates that a <see cref="T:Blog.Core.Entity.BlogPost"/> is a draft, and has not yet been published for viewing.
            </summary>
        </member>
        <member name="P:Blog.Core.BlogPostStatus.Published">
            <summary>
            Gets a status that indicates that a <see cref="T:Blog.Core.Entity.BlogPost"/> has been published for viewing.
            </summary>
        </member>
        <member name="T:Blog.Core.Exception.BlogPostAlreadyPublishedException">
            <summary>
            An excpetion that indicates that a <see cref="T:Blog.Core.Entity.BlogPost"/> which has already been published
            was attempted to be published again.
            </summary>
        </member>
        <member name="M:Blog.Core.Exception.BlogPostAlreadyPublishedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Blog.Core.Exception.BlogPostAlreadyPublishedException"/> class.
            </summary>
        </member>
        <member name="M:Blog.Core.Exception.BlogPostAlreadyPublishedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Blog.Core.Exception.BlogPostAlreadyPublishedException"/> class with a specified error
            message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Blog.Core.Exception.BlogPostAlreadyPublishedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Blog.Core.Exception.BlogPostAlreadyPublishedException"/> class with a specified error
            message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">
            The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="T:Blog.Core.Utility.Enumeration">
            <summary>
            A base class that is used to create type safe enums. From https://lostechies.com/jimmybogard/2008/08/12/enumeration-classes/.
            </summary>
        </member>
        <member name="M:Blog.Core.Utility.Enumeration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Blog.Core.Utility.Enumeration"/> class.
            </summary>
        </member>
        <member name="M:Blog.Core.Utility.Enumeration.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Blog.Core.Utility.Enumeration"/> class
            using the given <paramref name="keyCode"/> and <paramref name="displayName"/>.
            </summary>
            <param name="keyCode">Shorthand identifier for the enumeration.</param>
            <param name="displayName">Longer more descriptive identifier for the enumeration, should be suitable for end users.</param>
        </member>
        <member name="P:Blog.Core.Utility.Enumeration.KeyCode">
            <summary>
            Gets the key code for this enumeration.
            </summary>
        </member>
        <member name="P:Blog.Core.Utility.Enumeration.DisplayName">
            <summary>
            Gets the display name for this enumeration.
            </summary>
        </member>
        <member name="M:Blog.Core.Utility.Enumeration.op_Equality(Blog.Core.Utility.Enumeration,Blog.Core.Utility.Enumeration)">
            <summary>
            Checks if two <see cref="T:Blog.Core.Utility.Enumeration"/>s are equivalent.
            </summary>
            <param name="obj1">The first <see cref="T:Blog.Core.Utility.Enumeration"/> to compare.</param>
            <param name="obj2">The second <see cref="T:Blog.Core.Utility.Enumeration"/> to compare.</param>
            <returns>true if the given <see cref="T:Blog.Core.Utility.Enumeration"/>s are equivalent, otherwise false.</returns>
        </member>
        <member name="M:Blog.Core.Utility.Enumeration.op_Inequality(Blog.Core.Utility.Enumeration,Blog.Core.Utility.Enumeration)">
            <summary>
            Checks if two <see cref="T:Blog.Core.Utility.Enumeration"/>s are not equivalent.
            </summary>
            <param name="obj1">The first <see cref="T:Blog.Core.Utility.Enumeration"/> to compare.</param>
            <param name="obj2">The second <see cref="T:Blog.Core.Utility.Enumeration"/> to compare.</param>
            <returns>true if the given <see cref="T:Blog.Core.Utility.Enumeration"/>s are not equivalent, otherwise false.</returns>
        </member>
        <member name="M:Blog.Core.Utility.Enumeration.GetAll``1">
            <summary>
            Gets all <see cref="T:Blog.Core.Utility.Enumeration"/>s of the given type.
            </summary>
            <typeparam name="T">A super type of <see cref="T:Blog.Core.Utility.Enumeration"/>.</typeparam>
            <returns>All <see cref="T:Blog.Core.Utility.Enumeration"/>s of the given type.</returns>
        </member>
        <member name="M:Blog.Core.Utility.Enumeration.FromKeyCode``1(System.String)">
            <summary>
            Creates an <see cref="T:Blog.Core.Utility.Enumeration"/> of the given type from the specified <paramref name="keyCode"/>'.
            </summary>
            <typeparam name="T">A super type of <see cref="T:Blog.Core.Utility.Enumeration"/>.</typeparam>
            <param name="keyCode">The value to construct the <see cref="T:Blog.Core.Utility.Enumeration"/> from.</param>
            <returns>An <see cref="T:Blog.Core.Utility.Enumeration"/> of the given type.</returns>
        </member>
        <member name="M:Blog.Core.Utility.Enumeration.FromDisplayName``1(System.String)">
            <summary>
            asdjk
            </summary>
            <typeparam name="T">a</typeparam>
            <param name="displayName">asd</param>
            <returns>asds</returns>
        </member>
        <member name="M:Blog.Core.Utility.Enumeration.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Blog.Core.Utility.Enumeration.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Blog.Core.Utility.Enumeration.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Blog.Core.Utility.Enumeration.CompareTo(System.Object)">
            <inheritdoc/>
        </member>
    </members>
</doc>
